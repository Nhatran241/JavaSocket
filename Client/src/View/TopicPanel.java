/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Services.Interfaces.Interfaces;
import Services.MyClient;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javalibrary.model.reponse.RelatedTopicReponse;
import javalibrary.model.reponse.SearchOverTimeReponse;
import javalibrary.model.request.RelatedTopicRequest;
import javalibrary.model.request.SearchOvertimeRequest;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author trann
 */
public class TopicPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchOverTimePanel
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new java.awt.ScrollPane();
        btn_previous = new javax.swing.JButton();
        btn_next = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1236, 524));

        btn_previous.setText("previous page");
        btn_previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_previousActionPerformed(evt);
            }
        });

        btn_next.setText("next page");
        btn_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btn_previous)
                .addGap(18, 18, 18)
                .addComponent(btn_next, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(969, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_previous)
                    .addComponent(btn_next))
                .addGap(23, 23, 23))
        );

        btn_previous.setVisible(false);
        btn_next.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nextActionPerformed
        // TODO add your handling code here:
        relatedTopicRequest.setPageNumber(relatedTopicRequest.getPageNumber()+1);
         showLoading();
        MyClient.getInstance().getRelatedTopic(relatedTopicRequest,new Interfaces.IRelatedTopicListener() {
            @Override
            public void OnGetRelatedTopicSuccess(List<RelatedTopicReponse> listRelatedTopicReponse) {
              
                initData(listRelatedTopicReponse);
                dismisLoading();
            }

            @Override
            public void OnGetRelatedTopicFailed() {
            dismisLoading();
                showTryAgain();
          }
        });
    }//GEN-LAST:event_btn_nextActionPerformed

    private void btn_previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_previousActionPerformed
        // TODO add your handling code here:
        relatedTopicRequest.setPageNumber(relatedTopicRequest.getPageNumber()-1);
         showLoading();
        MyClient.getInstance().getRelatedTopic(relatedTopicRequest,new Interfaces.IRelatedTopicListener() {
            @Override
            public void OnGetRelatedTopicSuccess(List<RelatedTopicReponse> listRelatedTopicReponse) {
                initData(listRelatedTopicReponse);
                dismisLoading();
            }

            @Override
            public void OnGetRelatedTopicFailed() {
            dismisLoading();
                showTryAgain();
          }
        });
    }//GEN-LAST:event_btn_previousActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_next;
    private javax.swing.JButton btn_previous;
    private java.awt.ScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
 private void initData(List<RelatedTopicReponse> list) {
           if(relatedTopicRequest.getPageNumber()>1){
                    btn_previous.setVisible(true);
                }else {
                    btn_previous.setVisible(false);
                }
                btn_next.setVisible(true);
                btn_next.invalidate();
                btn_previous.invalidate();
        scrollPane.removeAll();
        if(list.size() > 0){
            JPanel listTopic = new JPanel(new GridLayout(list.size(),0));
            for(int i =0;i<list.size();i++){
                listTopic.add(new TopicItemView(list.get(i)),new GridLayout(i+1,0));
            }
            scrollPane.add(listTopic);
        }else {
            JPanel listTopic = new JPanel(new GridBagLayout());
            JLabel jLabel =new JLabel("No result or Api Limit");
            jLabel.setFont(new Font("Serif", Font.PLAIN, 20));
            listTopic.add(jLabel);
            scrollPane.add(listTopic);
        }

  }

    RelatedTopicRequest relatedTopicRequest;
    public void loadData(RelatedTopicRequest relatedTopicRequest){
        this.relatedTopicRequest = relatedTopicRequest;
        showLoading();
        MyClient.getInstance().getRelatedTopic(relatedTopicRequest,new Interfaces.IRelatedTopicListener() {
            @Override
            public void OnGetRelatedTopicSuccess(List<RelatedTopicReponse> listRelatedTopicReponse) {
                initData(listRelatedTopicReponse);
                dismisLoading();
            }

            @Override
            public void OnGetRelatedTopicFailed() {
            dismisLoading();
                showTryAgain();
          }
        });
    }
    private void showLoading() {
        scrollPane.add(loading,BorderLayout.CENTER);
        scrollPane.invalidate();
    }
     
    private void dismisLoading(){
         scrollPane.invalidate();
    
    }
    private void showTryAgain(){
    
    }
    private void onTryAgainClick(){
    
    }

    private void initUI() {
        Icon loadingImage = new ImageIcon(this.getClass().getResource("../image/goodLoading.gif"));
        loading = new JLabel(loadingImage);
        loading.setSize(200, 200);
        loading.setLocation(600, 200);
    }
    
     JLabel loading;
    public TopicPanel() {
        initComponents();
        initUI();
    }

}
